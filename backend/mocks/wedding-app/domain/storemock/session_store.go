// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"context"
	"wedding-app/domain/model"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) CreateSession(ctx context.Context, userID uuid.UUID, quizID uuid.UUID, questionCount int) (*model.Session, error) {
	ret := _mock.Called(ctx, userID, quizID, questionCount)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, int) (*model.Session, error)); ok {
		return returnFunc(ctx, userID, quizID, questionCount)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, int) *model.Session); ok {
		r0 = returnFunc(ctx, userID, quizID, questionCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, int) error); ok {
		r1 = returnFunc(ctx, userID, quizID, questionCount)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionStore_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - quizID uuid.UUID
//   - questionCount int
func (_e *MockSessionStore_Expecter) CreateSession(ctx interface{}, userID interface{}, quizID interface{}, questionCount interface{}) *MockSessionStore_CreateSession_Call {
	return &MockSessionStore_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID, quizID, questionCount)}
}

func (_c *MockSessionStore_CreateSession_Call) Run(run func(ctx context.Context, userID uuid.UUID, quizID uuid.UUID, questionCount int)) *MockSessionStore_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSessionStore_CreateSession_Call) Return(session *model.Session, err error) *MockSessionStore_CreateSession_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionStore_CreateSession_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, quizID uuid.UUID, questionCount int) (*model.Session, error)) *MockSessionStore_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// FindActive provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) FindActive(ctx context.Context, userID uuid.UUID, quizID uuid.UUID) (*model.Session, error) {
	ret := _mock.Called(ctx, userID, quizID)

	if len(ret) == 0 {
		panic("no return value specified for FindActive")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*model.Session, error)); ok {
		return returnFunc(ctx, userID, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *model.Session); ok {
		r0 = returnFunc(ctx, userID, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_FindActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindActive'
type MockSessionStore_FindActive_Call struct {
	*mock.Call
}

// FindActive is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - quizID uuid.UUID
func (_e *MockSessionStore_Expecter) FindActive(ctx interface{}, userID interface{}, quizID interface{}) *MockSessionStore_FindActive_Call {
	return &MockSessionStore_FindActive_Call{Call: _e.mock.On("FindActive", ctx, userID, quizID)}
}

func (_c *MockSessionStore_FindActive_Call) Run(run func(ctx context.Context, userID uuid.UUID, quizID uuid.UUID)) *MockSessionStore_FindActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionStore_FindActive_Call) Return(session *model.Session, err error) *MockSessionStore_FindActive_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionStore_FindActive_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, quizID uuid.UUID) (*model.Session, error)) *MockSessionStore_FindActive_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) FindByID(ctx context.Context, sessionID uuid.UUID) (*model.Session, error) {
	ret := _mock.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Session, error)); ok {
		return returnFunc(ctx, sessionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Session); ok {
		r0 = returnFunc(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockSessionStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockSessionStore_Expecter) FindByID(ctx interface{}, sessionID interface{}) *MockSessionStore_FindByID_Call {
	return &MockSessionStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, sessionID)}
}

func (_c *MockSessionStore_FindByID_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockSessionStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_FindByID_Call) Return(session *model.Session, err error) *MockSessionStore_FindByID_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionStore_FindByID_Call) RunAndReturn(run func(ctx context.Context, sessionID uuid.UUID) (*model.Session, error)) *MockSessionStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveSessionsByQuizID provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) GetActiveSessionsByQuizID(ctx context.Context, quizID uuid.UUID) ([]*model.Session, error) {
	ret := _mock.Called(ctx, quizID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveSessionsByQuizID")
	}

	var r0 []*model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Session, error)); ok {
		return returnFunc(ctx, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Session); ok {
		r0 = returnFunc(ctx, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_GetActiveSessionsByQuizID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveSessionsByQuizID'
type MockSessionStore_GetActiveSessionsByQuizID_Call struct {
	*mock.Call
}

// GetActiveSessionsByQuizID is a helper method to define mock.On call
//   - ctx context.Context
//   - quizID uuid.UUID
func (_e *MockSessionStore_Expecter) GetActiveSessionsByQuizID(ctx interface{}, quizID interface{}) *MockSessionStore_GetActiveSessionsByQuizID_Call {
	return &MockSessionStore_GetActiveSessionsByQuizID_Call{Call: _e.mock.On("GetActiveSessionsByQuizID", ctx, quizID)}
}

func (_c *MockSessionStore_GetActiveSessionsByQuizID_Call) Run(run func(ctx context.Context, quizID uuid.UUID)) *MockSessionStore_GetActiveSessionsByQuizID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_GetActiveSessionsByQuizID_Call) Return(sessions []*model.Session, err error) *MockSessionStore_GetActiveSessionsByQuizID_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockSessionStore_GetActiveSessionsByQuizID_Call) RunAndReturn(run func(ctx context.Context, quizID uuid.UUID) ([]*model.Session, error)) *MockSessionStore_GetActiveSessionsByQuizID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompletedSessionsByQuizID provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) GetCompletedSessionsByQuizID(ctx context.Context, quizID uuid.UUID) ([]*model.Session, error) {
	ret := _mock.Called(ctx, quizID)

	if len(ret) == 0 {
		panic("no return value specified for GetCompletedSessionsByQuizID")
	}

	var r0 []*model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Session, error)); ok {
		return returnFunc(ctx, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Session); ok {
		r0 = returnFunc(ctx, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_GetCompletedSessionsByQuizID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompletedSessionsByQuizID'
type MockSessionStore_GetCompletedSessionsByQuizID_Call struct {
	*mock.Call
}

// GetCompletedSessionsByQuizID is a helper method to define mock.On call
//   - ctx context.Context
//   - quizID uuid.UUID
func (_e *MockSessionStore_Expecter) GetCompletedSessionsByQuizID(ctx interface{}, quizID interface{}) *MockSessionStore_GetCompletedSessionsByQuizID_Call {
	return &MockSessionStore_GetCompletedSessionsByQuizID_Call{Call: _e.mock.On("GetCompletedSessionsByQuizID", ctx, quizID)}
}

func (_c *MockSessionStore_GetCompletedSessionsByQuizID_Call) Run(run func(ctx context.Context, quizID uuid.UUID)) *MockSessionStore_GetCompletedSessionsByQuizID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_GetCompletedSessionsByQuizID_Call) Return(sessions []*model.Session, err error) *MockSessionStore_GetCompletedSessionsByQuizID_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockSessionStore_GetCompletedSessionsByQuizID_Call) RunAndReturn(run func(ctx context.Context, quizID uuid.UUID) ([]*model.Session, error)) *MockSessionStore_GetCompletedSessionsByQuizID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionsByQuizID provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) GetSessionsByQuizID(ctx context.Context, quizID uuid.UUID) ([]*model.Session, error) {
	ret := _mock.Called(ctx, quizID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionsByQuizID")
	}

	var r0 []*model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Session, error)); ok {
		return returnFunc(ctx, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Session); ok {
		r0 = returnFunc(ctx, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_GetSessionsByQuizID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionsByQuizID'
type MockSessionStore_GetSessionsByQuizID_Call struct {
	*mock.Call
}

// GetSessionsByQuizID is a helper method to define mock.On call
//   - ctx context.Context
//   - quizID uuid.UUID
func (_e *MockSessionStore_Expecter) GetSessionsByQuizID(ctx interface{}, quizID interface{}) *MockSessionStore_GetSessionsByQuizID_Call {
	return &MockSessionStore_GetSessionsByQuizID_Call{Call: _e.mock.On("GetSessionsByQuizID", ctx, quizID)}
}

func (_c *MockSessionStore_GetSessionsByQuizID_Call) Run(run func(ctx context.Context, quizID uuid.UUID)) *MockSessionStore_GetSessionsByQuizID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_GetSessionsByQuizID_Call) Return(sessions []*model.Session, err error) *MockSessionStore_GetSessionsByQuizID_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockSessionStore_GetSessionsByQuizID_Call) RunAndReturn(run func(ctx context.Context, quizID uuid.UUID) ([]*model.Session, error)) *MockSessionStore_GetSessionsByQuizID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSession provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) UpdateSession(ctx context.Context, session *model.Session) error {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Session) error); ok {
		r0 = returnFunc(ctx, session)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionStore_UpdateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSession'
type MockSessionStore_UpdateSession_Call struct {
	*mock.Call
}

// UpdateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *model.Session
func (_e *MockSessionStore_Expecter) UpdateSession(ctx interface{}, session interface{}) *MockSessionStore_UpdateSession_Call {
	return &MockSessionStore_UpdateSession_Call{Call: _e.mock.On("UpdateSession", ctx, session)}
}

func (_c *MockSessionStore_UpdateSession_Call) Run(run func(ctx context.Context, session *model.Session)) *MockSessionStore_UpdateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Session
		if args[1] != nil {
			arg1 = args[1].(*model.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_UpdateSession_Call) Return(err error) *MockSessionStore_UpdateSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionStore_UpdateSession_Call) RunAndReturn(run func(ctx context.Context, session *model.Session) error) *MockSessionStore_UpdateSession_Call {
	_c.Call.Return(run)
	return _c
}
