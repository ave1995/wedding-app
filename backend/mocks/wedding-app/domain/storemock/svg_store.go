// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"context"
	"wedding-app/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSvgStore creates a new instance of MockSvgStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSvgStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSvgStore {
	mock := &MockSvgStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSvgStore is an autogenerated mock type for the SvgStore type
type MockSvgStore struct {
	mock.Mock
}

type MockSvgStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSvgStore) EXPECT() *MockSvgStore_Expecter {
	return &MockSvgStore_Expecter{mock: &_m.Mock}
}

// GetUserSvgs provides a mock function for the type MockSvgStore
func (_mock *MockSvgStore) GetUserSvgs(ctx context.Context) ([]*model.BucketItemUrl, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSvgs")
	}

	var r0 []*model.BucketItemUrl
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*model.BucketItemUrl, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*model.BucketItemUrl); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.BucketItemUrl)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSvgStore_GetUserSvgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSvgs'
type MockSvgStore_GetUserSvgs_Call struct {
	*mock.Call
}

// GetUserSvgs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSvgStore_Expecter) GetUserSvgs(ctx interface{}) *MockSvgStore_GetUserSvgs_Call {
	return &MockSvgStore_GetUserSvgs_Call{Call: _e.mock.On("GetUserSvgs", ctx)}
}

func (_c *MockSvgStore_GetUserSvgs_Call) Run(run func(ctx context.Context)) *MockSvgStore_GetUserSvgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSvgStore_GetUserSvgs_Call) Return(sVGs []*model.BucketItemUrl, err error) *MockSvgStore_GetUserSvgs_Call {
	_c.Call.Return(sVGs, err)
	return _c
}

func (_c *MockSvgStore_GetUserSvgs_Call) RunAndReturn(run func(ctx context.Context) ([]*model.BucketItemUrl, error)) *MockSvgStore_GetUserSvgs_Call {
	_c.Call.Return(run)
	return _c
}
