// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"context"
	"wedding-app/domain/model"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuizStore creates a new instance of MockQuizStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuizStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuizStore {
	mock := &MockQuizStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuizStore is an autogenerated mock type for the QuizStore type
type MockQuizStore struct {
	mock.Mock
}

type MockQuizStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuizStore) EXPECT() *MockQuizStore_Expecter {
	return &MockQuizStore_Expecter{mock: &_m.Mock}
}

// CreateQuiz provides a mock function for the type MockQuizStore
func (_mock *MockQuizStore) CreateQuiz(ctx context.Context, name string) (*model.Quiz, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuiz")
	}

	var r0 *model.Quiz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Quiz, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Quiz); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Quiz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuizStore_CreateQuiz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuiz'
type MockQuizStore_CreateQuiz_Call struct {
	*mock.Call
}

// CreateQuiz is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuizStore_Expecter) CreateQuiz(ctx interface{}, name interface{}) *MockQuizStore_CreateQuiz_Call {
	return &MockQuizStore_CreateQuiz_Call{Call: _e.mock.On("CreateQuiz", ctx, name)}
}

func (_c *MockQuizStore_CreateQuiz_Call) Run(run func(ctx context.Context, name string)) *MockQuizStore_CreateQuiz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuizStore_CreateQuiz_Call) Return(quiz *model.Quiz, err error) *MockQuizStore_CreateQuiz_Call {
	_c.Call.Return(quiz, err)
	return _c
}

func (_c *MockQuizStore_CreateQuiz_Call) RunAndReturn(run func(ctx context.Context, name string) (*model.Quiz, error)) *MockQuizStore_CreateQuiz_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuizByID provides a mock function for the type MockQuizStore
func (_mock *MockQuizStore) GetQuizByID(ctx context.Context, id uuid.UUID) (*model.Quiz, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetQuizByID")
	}

	var r0 *model.Quiz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Quiz, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Quiz); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Quiz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuizStore_GetQuizByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuizByID'
type MockQuizStore_GetQuizByID_Call struct {
	*mock.Call
}

// GetQuizByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuizStore_Expecter) GetQuizByID(ctx interface{}, id interface{}) *MockQuizStore_GetQuizByID_Call {
	return &MockQuizStore_GetQuizByID_Call{Call: _e.mock.On("GetQuizByID", ctx, id)}
}

func (_c *MockQuizStore_GetQuizByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuizStore_GetQuizByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuizStore_GetQuizByID_Call) Return(quiz *model.Quiz, err error) *MockQuizStore_GetQuizByID_Call {
	_c.Call.Return(quiz, err)
	return _c
}

func (_c *MockQuizStore_GetQuizByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*model.Quiz, error)) *MockQuizStore_GetQuizByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuizByInviteCode provides a mock function for the type MockQuizStore
func (_mock *MockQuizStore) GetQuizByInviteCode(ctx context.Context, inviteCode uuid.UUID) (*model.Quiz, error) {
	ret := _mock.Called(ctx, inviteCode)

	if len(ret) == 0 {
		panic("no return value specified for GetQuizByInviteCode")
	}

	var r0 *model.Quiz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Quiz, error)); ok {
		return returnFunc(ctx, inviteCode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Quiz); ok {
		r0 = returnFunc(ctx, inviteCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Quiz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, inviteCode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuizStore_GetQuizByInviteCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuizByInviteCode'
type MockQuizStore_GetQuizByInviteCode_Call struct {
	*mock.Call
}

// GetQuizByInviteCode is a helper method to define mock.On call
//   - ctx context.Context
//   - inviteCode uuid.UUID
func (_e *MockQuizStore_Expecter) GetQuizByInviteCode(ctx interface{}, inviteCode interface{}) *MockQuizStore_GetQuizByInviteCode_Call {
	return &MockQuizStore_GetQuizByInviteCode_Call{Call: _e.mock.On("GetQuizByInviteCode", ctx, inviteCode)}
}

func (_c *MockQuizStore_GetQuizByInviteCode_Call) Run(run func(ctx context.Context, inviteCode uuid.UUID)) *MockQuizStore_GetQuizByInviteCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuizStore_GetQuizByInviteCode_Call) Return(quiz *model.Quiz, err error) *MockQuizStore_GetQuizByInviteCode_Call {
	_c.Call.Return(quiz, err)
	return _c
}

func (_c *MockQuizStore_GetQuizByInviteCode_Call) RunAndReturn(run func(ctx context.Context, inviteCode uuid.UUID) (*model.Quiz, error)) *MockQuizStore_GetQuizByInviteCode_Call {
	_c.Call.Return(run)
	return _c
}
