// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"context"
	"wedding-app/domain/model"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// CreateGuest provides a mock function for the type MockUserStore
func (_mock *MockUserStore) CreateGuest(ctx context.Context, params model.CreateGuestParams) (*model.User, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateGuest")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CreateGuestParams) (*model.User, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CreateGuestParams) *model.User); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.CreateGuestParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStore_CreateGuest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGuest'
type MockUserStore_CreateGuest_Call struct {
	*mock.Call
}

// CreateGuest is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.CreateGuestParams
func (_e *MockUserStore_Expecter) CreateGuest(ctx interface{}, params interface{}) *MockUserStore_CreateGuest_Call {
	return &MockUserStore_CreateGuest_Call{Call: _e.mock.On("CreateGuest", ctx, params)}
}

func (_c *MockUserStore_CreateGuest_Call) Run(run func(ctx context.Context, params model.CreateGuestParams)) *MockUserStore_CreateGuest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.CreateGuestParams
		if args[1] != nil {
			arg1 = args[1].(model.CreateGuestParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserStore_CreateGuest_Call) Return(user *model.User, err error) *MockUserStore_CreateGuest_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_CreateGuest_Call) RunAndReturn(run func(ctx context.Context, params model.CreateGuestParams) (*model.User, error)) *MockUserStore_CreateGuest_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type MockUserStore
func (_mock *MockUserStore) GetUserByID(ctx context.Context, id uuid.UUID) (*model.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStore_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserStore_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUserStore_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockUserStore_GetUserByID_Call {
	return &MockUserStore_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockUserStore_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserStore_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserStore_GetUserByID_Call) Return(user *model.User, err error) *MockUserStore_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*model.User, error)) *MockUserStore_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function for the type MockUserStore
func (_mock *MockUserStore) LoginUser(ctx context.Context, email string, password string) (*model.User, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStore_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockUserStore_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockUserStore_Expecter) LoginUser(ctx interface{}, email interface{}, password interface{}) *MockUserStore_LoginUser_Call {
	return &MockUserStore_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, email, password)}
}

func (_c *MockUserStore_LoginUser_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserStore_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserStore_LoginUser_Call) Return(user *model.User, err error) *MockUserStore_LoginUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_LoginUser_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (*model.User, error)) *MockUserStore_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function for the type MockUserStore
func (_mock *MockUserStore) RegisterUser(ctx context.Context, params model.RegisterUserParams) (*model.User, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.RegisterUserParams) (*model.User, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.RegisterUserParams) *model.User); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.RegisterUserParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStore_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUserStore_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.RegisterUserParams
func (_e *MockUserStore_Expecter) RegisterUser(ctx interface{}, params interface{}) *MockUserStore_RegisterUser_Call {
	return &MockUserStore_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, params)}
}

func (_c *MockUserStore_RegisterUser_Call) Run(run func(ctx context.Context, params model.RegisterUserParams)) *MockUserStore_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.RegisterUserParams
		if args[1] != nil {
			arg1 = args[1].(model.RegisterUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserStore_RegisterUser_Call) Return(user *model.User, err error) *MockUserStore_RegisterUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_RegisterUser_Call) RunAndReturn(run func(ctx context.Context, params model.RegisterUserParams) (*model.User, error)) *MockUserStore_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}
