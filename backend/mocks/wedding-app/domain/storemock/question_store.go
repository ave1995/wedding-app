// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"context"
	"wedding-app/domain/model"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuestionStore creates a new instance of MockQuestionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuestionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuestionStore {
	mock := &MockQuestionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuestionStore is an autogenerated mock type for the QuestionStore type
type MockQuestionStore struct {
	mock.Mock
}

type MockQuestionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuestionStore) EXPECT() *MockQuestionStore_Expecter {
	return &MockQuestionStore_Expecter{mock: &_m.Mock}
}

// CreateQuestion provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) CreateQuestion(ctx context.Context, text string, quizID uuid.UUID, questionType model.QuestionType) (*model.Question, error) {
	ret := _mock.Called(ctx, text, quizID, questionType)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuestion")
	}

	var r0 *model.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, model.QuestionType) (*model.Question, error)); ok {
		return returnFunc(ctx, text, quizID, questionType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, model.QuestionType) *model.Question); ok {
		r0 = returnFunc(ctx, text, quizID, questionType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Question)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, model.QuestionType) error); ok {
		r1 = returnFunc(ctx, text, quizID, questionType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_CreateQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQuestion'
type MockQuestionStore_CreateQuestion_Call struct {
	*mock.Call
}

// CreateQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - text string
//   - quizID uuid.UUID
//   - questionType model.QuestionType
func (_e *MockQuestionStore_Expecter) CreateQuestion(ctx interface{}, text interface{}, quizID interface{}, questionType interface{}) *MockQuestionStore_CreateQuestion_Call {
	return &MockQuestionStore_CreateQuestion_Call{Call: _e.mock.On("CreateQuestion", ctx, text, quizID, questionType)}
}

func (_c *MockQuestionStore_CreateQuestion_Call) Run(run func(ctx context.Context, text string, quizID uuid.UUID, questionType model.QuestionType)) *MockQuestionStore_CreateQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 model.QuestionType
		if args[3] != nil {
			arg3 = args[3].(model.QuestionType)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockQuestionStore_CreateQuestion_Call) Return(question *model.Question, err error) *MockQuestionStore_CreateQuestion_Call {
	_c.Call.Return(question, err)
	return _c
}

func (_c *MockQuestionStore_CreateQuestion_Call) RunAndReturn(run func(ctx context.Context, text string, quizID uuid.UUID, questionType model.QuestionType) (*model.Question, error)) *MockQuestionStore_CreateQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountQuestionsByQuizID provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) GetCountQuestionsByQuizID(ctx context.Context, quizID uuid.UUID) (int, error) {
	ret := _mock.Called(ctx, quizID)

	if len(ret) == 0 {
		panic("no return value specified for GetCountQuestionsByQuizID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int, error)); ok {
		return returnFunc(ctx, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = returnFunc(ctx, quizID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_GetCountQuestionsByQuizID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountQuestionsByQuizID'
type MockQuestionStore_GetCountQuestionsByQuizID_Call struct {
	*mock.Call
}

// GetCountQuestionsByQuizID is a helper method to define mock.On call
//   - ctx context.Context
//   - quizID uuid.UUID
func (_e *MockQuestionStore_Expecter) GetCountQuestionsByQuizID(ctx interface{}, quizID interface{}) *MockQuestionStore_GetCountQuestionsByQuizID_Call {
	return &MockQuestionStore_GetCountQuestionsByQuizID_Call{Call: _e.mock.On("GetCountQuestionsByQuizID", ctx, quizID)}
}

func (_c *MockQuestionStore_GetCountQuestionsByQuizID_Call) Run(run func(ctx context.Context, quizID uuid.UUID)) *MockQuestionStore_GetCountQuestionsByQuizID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_GetCountQuestionsByQuizID_Call) Return(n int, err error) *MockQuestionStore_GetCountQuestionsByQuizID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuestionStore_GetCountQuestionsByQuizID_Call) RunAndReturn(run func(ctx context.Context, quizID uuid.UUID) (int, error)) *MockQuestionStore_GetCountQuestionsByQuizID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderedQuestionsByQuizID provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) GetOrderedQuestionsByQuizID(ctx context.Context, quizID uuid.UUID) ([]*model.Question, error) {
	ret := _mock.Called(ctx, quizID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderedQuestionsByQuizID")
	}

	var r0 []*model.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Question, error)); ok {
		return returnFunc(ctx, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Question); ok {
		r0 = returnFunc(ctx, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Question)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_GetOrderedQuestionsByQuizID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderedQuestionsByQuizID'
type MockQuestionStore_GetOrderedQuestionsByQuizID_Call struct {
	*mock.Call
}

// GetOrderedQuestionsByQuizID is a helper method to define mock.On call
//   - ctx context.Context
//   - quizID uuid.UUID
func (_e *MockQuestionStore_Expecter) GetOrderedQuestionsByQuizID(ctx interface{}, quizID interface{}) *MockQuestionStore_GetOrderedQuestionsByQuizID_Call {
	return &MockQuestionStore_GetOrderedQuestionsByQuizID_Call{Call: _e.mock.On("GetOrderedQuestionsByQuizID", ctx, quizID)}
}

func (_c *MockQuestionStore_GetOrderedQuestionsByQuizID_Call) Run(run func(ctx context.Context, quizID uuid.UUID)) *MockQuestionStore_GetOrderedQuestionsByQuizID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_GetOrderedQuestionsByQuizID_Call) Return(questions []*model.Question, err error) *MockQuestionStore_GetOrderedQuestionsByQuizID_Call {
	_c.Call.Return(questions, err)
	return _c
}

func (_c *MockQuestionStore_GetOrderedQuestionsByQuizID_Call) RunAndReturn(run func(ctx context.Context, quizID uuid.UUID) ([]*model.Question, error)) *MockQuestionStore_GetOrderedQuestionsByQuizID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionByID provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) GetQuestionByID(ctx context.Context, id uuid.UUID) (*model.Question, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestionByID")
	}

	var r0 *model.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Question, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Question); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Question)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_GetQuestionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionByID'
type MockQuestionStore_GetQuestionByID_Call struct {
	*mock.Call
}

// GetQuestionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuestionStore_Expecter) GetQuestionByID(ctx interface{}, id interface{}) *MockQuestionStore_GetQuestionByID_Call {
	return &MockQuestionStore_GetQuestionByID_Call{Call: _e.mock.On("GetQuestionByID", ctx, id)}
}

func (_c *MockQuestionStore_GetQuestionByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuestionStore_GetQuestionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_GetQuestionByID_Call) Return(question *model.Question, err error) *MockQuestionStore_GetQuestionByID_Call {
	_c.Call.Return(question, err)
	return _c
}

func (_c *MockQuestionStore_GetQuestionByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*model.Question, error)) *MockQuestionStore_GetQuestionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionByIDAndQuizID provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) GetQuestionByIDAndQuizID(ctx context.Context, questionID uuid.UUID, quizID uuid.UUID) (*model.Question, error) {
	ret := _mock.Called(ctx, questionID, quizID)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestionByIDAndQuizID")
	}

	var r0 *model.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*model.Question, error)); ok {
		return returnFunc(ctx, questionID, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *model.Question); ok {
		r0 = returnFunc(ctx, questionID, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Question)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, questionID, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_GetQuestionByIDAndQuizID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionByIDAndQuizID'
type MockQuestionStore_GetQuestionByIDAndQuizID_Call struct {
	*mock.Call
}

// GetQuestionByIDAndQuizID is a helper method to define mock.On call
//   - ctx context.Context
//   - questionID uuid.UUID
//   - quizID uuid.UUID
func (_e *MockQuestionStore_Expecter) GetQuestionByIDAndQuizID(ctx interface{}, questionID interface{}, quizID interface{}) *MockQuestionStore_GetQuestionByIDAndQuizID_Call {
	return &MockQuestionStore_GetQuestionByIDAndQuizID_Call{Call: _e.mock.On("GetQuestionByIDAndQuizID", ctx, questionID, quizID)}
}

func (_c *MockQuestionStore_GetQuestionByIDAndQuizID_Call) Run(run func(ctx context.Context, questionID uuid.UUID, quizID uuid.UUID)) *MockQuestionStore_GetQuestionByIDAndQuizID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockQuestionStore_GetQuestionByIDAndQuizID_Call) Return(question *model.Question, err error) *MockQuestionStore_GetQuestionByIDAndQuizID_Call {
	_c.Call.Return(question, err)
	return _c
}

func (_c *MockQuestionStore_GetQuestionByIDAndQuizID_Call) RunAndReturn(run func(ctx context.Context, questionID uuid.UUID, quizID uuid.UUID) (*model.Question, error)) *MockQuestionStore_GetQuestionByIDAndQuizID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestionsByQuizID provides a mock function for the type MockQuestionStore
func (_mock *MockQuestionStore) GetQuestionsByQuizID(ctx context.Context, quizID uuid.UUID) ([]*model.Question, error) {
	ret := _mock.Called(ctx, quizID)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestionsByQuizID")
	}

	var r0 []*model.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Question, error)); ok {
		return returnFunc(ctx, quizID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Question); ok {
		r0 = returnFunc(ctx, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Question)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, quizID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuestionStore_GetQuestionsByQuizID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestionsByQuizID'
type MockQuestionStore_GetQuestionsByQuizID_Call struct {
	*mock.Call
}

// GetQuestionsByQuizID is a helper method to define mock.On call
//   - ctx context.Context
//   - quizID uuid.UUID
func (_e *MockQuestionStore_Expecter) GetQuestionsByQuizID(ctx interface{}, quizID interface{}) *MockQuestionStore_GetQuestionsByQuizID_Call {
	return &MockQuestionStore_GetQuestionsByQuizID_Call{Call: _e.mock.On("GetQuestionsByQuizID", ctx, quizID)}
}

func (_c *MockQuestionStore_GetQuestionsByQuizID_Call) Run(run func(ctx context.Context, quizID uuid.UUID)) *MockQuestionStore_GetQuestionsByQuizID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuestionStore_GetQuestionsByQuizID_Call) Return(questions []*model.Question, err error) *MockQuestionStore_GetQuestionsByQuizID_Call {
	_c.Call.Return(questions, err)
	return _c
}

func (_c *MockQuestionStore_GetQuestionsByQuizID_Call) RunAndReturn(run func(ctx context.Context, quizID uuid.UUID) ([]*model.Question, error)) *MockQuestionStore_GetQuestionsByQuizID_Call {
	_c.Call.Return(run)
	return _c
}
