// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"context"
	"wedding-app/domain/model"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAttemptStore creates a new instance of MockAttemptStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAttemptStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAttemptStore {
	mock := &MockAttemptStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAttemptStore is an autogenerated mock type for the AttemptStore type
type MockAttemptStore struct {
	mock.Mock
}

type MockAttemptStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAttemptStore) EXPECT() *MockAttemptStore_Expecter {
	return &MockAttemptStore_Expecter{mock: &_m.Mock}
}

// CreateAttemptAnswer provides a mock function for the type MockAttemptStore
func (_mock *MockAttemptStore) CreateAttemptAnswer(ctx context.Context, params model.CreateAttemptParams) (*model.Attempt, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttemptAnswer")
	}

	var r0 *model.Attempt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CreateAttemptParams) (*model.Attempt, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CreateAttemptParams) *model.Attempt); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Attempt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.CreateAttemptParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttemptStore_CreateAttemptAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAttemptAnswer'
type MockAttemptStore_CreateAttemptAnswer_Call struct {
	*mock.Call
}

// CreateAttemptAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.CreateAttemptParams
func (_e *MockAttemptStore_Expecter) CreateAttemptAnswer(ctx interface{}, params interface{}) *MockAttemptStore_CreateAttemptAnswer_Call {
	return &MockAttemptStore_CreateAttemptAnswer_Call{Call: _e.mock.On("CreateAttemptAnswer", ctx, params)}
}

func (_c *MockAttemptStore_CreateAttemptAnswer_Call) Run(run func(ctx context.Context, params model.CreateAttemptParams)) *MockAttemptStore_CreateAttemptAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.CreateAttemptParams
		if args[1] != nil {
			arg1 = args[1].(model.CreateAttemptParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttemptStore_CreateAttemptAnswer_Call) Return(attempt *model.Attempt, err error) *MockAttemptStore_CreateAttemptAnswer_Call {
	_c.Call.Return(attempt, err)
	return _c
}

func (_c *MockAttemptStore_CreateAttemptAnswer_Call) RunAndReturn(run func(ctx context.Context, params model.CreateAttemptParams) (*model.Attempt, error)) *MockAttemptStore_CreateAttemptAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnsweredBySessionID provides a mock function for the type MockAttemptStore
func (_mock *MockAttemptStore) GetAnsweredBySessionID(ctx context.Context, sessionID uuid.UUID) ([]*model.Attempt, error) {
	ret := _mock.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAnsweredBySessionID")
	}

	var r0 []*model.Attempt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Attempt, error)); ok {
		return returnFunc(ctx, sessionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Attempt); ok {
		r0 = returnFunc(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Attempt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttemptStore_GetAnsweredBySessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnsweredBySessionID'
type MockAttemptStore_GetAnsweredBySessionID_Call struct {
	*mock.Call
}

// GetAnsweredBySessionID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockAttemptStore_Expecter) GetAnsweredBySessionID(ctx interface{}, sessionID interface{}) *MockAttemptStore_GetAnsweredBySessionID_Call {
	return &MockAttemptStore_GetAnsweredBySessionID_Call{Call: _e.mock.On("GetAnsweredBySessionID", ctx, sessionID)}
}

func (_c *MockAttemptStore_GetAnsweredBySessionID_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockAttemptStore_GetAnsweredBySessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttemptStore_GetAnsweredBySessionID_Call) Return(attempts []*model.Attempt, err error) *MockAttemptStore_GetAnsweredBySessionID_Call {
	_c.Call.Return(attempts, err)
	return _c
}

func (_c *MockAttemptStore_GetAnsweredBySessionID_Call) RunAndReturn(run func(ctx context.Context, sessionID uuid.UUID) ([]*model.Attempt, error)) *MockAttemptStore_GetAnsweredBySessionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnsweredBySessionIDAndQuestionID provides a mock function for the type MockAttemptStore
func (_mock *MockAttemptStore) GetAnsweredBySessionIDAndQuestionID(ctx context.Context, sessionID uuid.UUID, questionID uuid.UUID) (*model.Attempt, error) {
	ret := _mock.Called(ctx, sessionID, questionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAnsweredBySessionIDAndQuestionID")
	}

	var r0 *model.Attempt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*model.Attempt, error)); ok {
		return returnFunc(ctx, sessionID, questionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *model.Attempt); ok {
		r0 = returnFunc(ctx, sessionID, questionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Attempt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, sessionID, questionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnsweredBySessionIDAndQuestionID'
type MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call struct {
	*mock.Call
}

// GetAnsweredBySessionIDAndQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - questionID uuid.UUID
func (_e *MockAttemptStore_Expecter) GetAnsweredBySessionIDAndQuestionID(ctx interface{}, sessionID interface{}, questionID interface{}) *MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call {
	return &MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call{Call: _e.mock.On("GetAnsweredBySessionIDAndQuestionID", ctx, sessionID, questionID)}
}

func (_c *MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, questionID uuid.UUID)) *MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call) Return(attempt *model.Attempt, err error) *MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call {
	_c.Call.Return(attempt, err)
	return _c
}

func (_c *MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call) RunAndReturn(run func(ctx context.Context, sessionID uuid.UUID, questionID uuid.UUID) (*model.Attempt, error)) *MockAttemptStore_GetAnsweredBySessionIDAndQuestionID_Call {
	_c.Call.Return(run)
	return _c
}
