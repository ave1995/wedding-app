// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storemock

import (
	"context"
	"wedding-app/domain/model"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAnswerStore creates a new instance of MockAnswerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnswerStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnswerStore {
	mock := &MockAnswerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAnswerStore is an autogenerated mock type for the AnswerStore type
type MockAnswerStore struct {
	mock.Mock
}

type MockAnswerStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnswerStore) EXPECT() *MockAnswerStore_Expecter {
	return &MockAnswerStore_Expecter{mock: &_m.Mock}
}

// CreateAnswer provides a mock function for the type MockAnswerStore
func (_mock *MockAnswerStore) CreateAnswer(ctx context.Context, text string, questionID uuid.UUID, isCorrect bool) (*model.Answer, error) {
	ret := _mock.Called(ctx, text, questionID, isCorrect)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnswer")
	}

	var r0 *model.Answer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, bool) (*model.Answer, error)); ok {
		return returnFunc(ctx, text, questionID, isCorrect)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, bool) *model.Answer); ok {
		r0 = returnFunc(ctx, text, questionID, isCorrect)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Answer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, text, questionID, isCorrect)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAnswerStore_CreateAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAnswer'
type MockAnswerStore_CreateAnswer_Call struct {
	*mock.Call
}

// CreateAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - text string
//   - questionID uuid.UUID
//   - isCorrect bool
func (_e *MockAnswerStore_Expecter) CreateAnswer(ctx interface{}, text interface{}, questionID interface{}, isCorrect interface{}) *MockAnswerStore_CreateAnswer_Call {
	return &MockAnswerStore_CreateAnswer_Call{Call: _e.mock.On("CreateAnswer", ctx, text, questionID, isCorrect)}
}

func (_c *MockAnswerStore_CreateAnswer_Call) Run(run func(ctx context.Context, text string, questionID uuid.UUID, isCorrect bool)) *MockAnswerStore_CreateAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAnswerStore_CreateAnswer_Call) Return(answer *model.Answer, err error) *MockAnswerStore_CreateAnswer_Call {
	_c.Call.Return(answer, err)
	return _c
}

func (_c *MockAnswerStore_CreateAnswer_Call) RunAndReturn(run func(ctx context.Context, text string, questionID uuid.UUID, isCorrect bool) (*model.Answer, error)) *MockAnswerStore_CreateAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnswerByID provides a mock function for the type MockAnswerStore
func (_mock *MockAnswerStore) GetAnswerByID(ctx context.Context, id uuid.UUID) (*model.Answer, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAnswerByID")
	}

	var r0 *model.Answer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Answer, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Answer); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Answer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAnswerStore_GetAnswerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnswerByID'
type MockAnswerStore_GetAnswerByID_Call struct {
	*mock.Call
}

// GetAnswerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAnswerStore_Expecter) GetAnswerByID(ctx interface{}, id interface{}) *MockAnswerStore_GetAnswerByID_Call {
	return &MockAnswerStore_GetAnswerByID_Call{Call: _e.mock.On("GetAnswerByID", ctx, id)}
}

func (_c *MockAnswerStore_GetAnswerByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAnswerStore_GetAnswerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAnswerStore_GetAnswerByID_Call) Return(answer *model.Answer, err error) *MockAnswerStore_GetAnswerByID_Call {
	_c.Call.Return(answer, err)
	return _c
}

func (_c *MockAnswerStore_GetAnswerByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*model.Answer, error)) *MockAnswerStore_GetAnswerByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnswerByIDAndQuestionID provides a mock function for the type MockAnswerStore
func (_mock *MockAnswerStore) GetAnswerByIDAndQuestionID(ctx context.Context, answerID uuid.UUID, questionID uuid.UUID) (*model.Answer, error) {
	ret := _mock.Called(ctx, answerID, questionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAnswerByIDAndQuestionID")
	}

	var r0 *model.Answer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*model.Answer, error)); ok {
		return returnFunc(ctx, answerID, questionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *model.Answer); ok {
		r0 = returnFunc(ctx, answerID, questionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Answer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, answerID, questionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAnswerStore_GetAnswerByIDAndQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnswerByIDAndQuestionID'
type MockAnswerStore_GetAnswerByIDAndQuestionID_Call struct {
	*mock.Call
}

// GetAnswerByIDAndQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - answerID uuid.UUID
//   - questionID uuid.UUID
func (_e *MockAnswerStore_Expecter) GetAnswerByIDAndQuestionID(ctx interface{}, answerID interface{}, questionID interface{}) *MockAnswerStore_GetAnswerByIDAndQuestionID_Call {
	return &MockAnswerStore_GetAnswerByIDAndQuestionID_Call{Call: _e.mock.On("GetAnswerByIDAndQuestionID", ctx, answerID, questionID)}
}

func (_c *MockAnswerStore_GetAnswerByIDAndQuestionID_Call) Run(run func(ctx context.Context, answerID uuid.UUID, questionID uuid.UUID)) *MockAnswerStore_GetAnswerByIDAndQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAnswerStore_GetAnswerByIDAndQuestionID_Call) Return(answer *model.Answer, err error) *MockAnswerStore_GetAnswerByIDAndQuestionID_Call {
	_c.Call.Return(answer, err)
	return _c
}

func (_c *MockAnswerStore_GetAnswerByIDAndQuestionID_Call) RunAndReturn(run func(ctx context.Context, answerID uuid.UUID, questionID uuid.UUID) (*model.Answer, error)) *MockAnswerStore_GetAnswerByIDAndQuestionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnswersByQuestionID provides a mock function for the type MockAnswerStore
func (_mock *MockAnswerStore) GetAnswersByQuestionID(ctx context.Context, questionID uuid.UUID) ([]*model.Answer, error) {
	ret := _mock.Called(ctx, questionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAnswersByQuestionID")
	}

	var r0 []*model.Answer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*model.Answer, error)); ok {
		return returnFunc(ctx, questionID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Answer); ok {
		r0 = returnFunc(ctx, questionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Answer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, questionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAnswerStore_GetAnswersByQuestionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnswersByQuestionID'
type MockAnswerStore_GetAnswersByQuestionID_Call struct {
	*mock.Call
}

// GetAnswersByQuestionID is a helper method to define mock.On call
//   - ctx context.Context
//   - questionID uuid.UUID
func (_e *MockAnswerStore_Expecter) GetAnswersByQuestionID(ctx interface{}, questionID interface{}) *MockAnswerStore_GetAnswersByQuestionID_Call {
	return &MockAnswerStore_GetAnswersByQuestionID_Call{Call: _e.mock.On("GetAnswersByQuestionID", ctx, questionID)}
}

func (_c *MockAnswerStore_GetAnswersByQuestionID_Call) Run(run func(ctx context.Context, questionID uuid.UUID)) *MockAnswerStore_GetAnswersByQuestionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAnswerStore_GetAnswersByQuestionID_Call) Return(answers []*model.Answer, err error) *MockAnswerStore_GetAnswersByQuestionID_Call {
	_c.Call.Return(answers, err)
	return _c
}

func (_c *MockAnswerStore_GetAnswersByQuestionID_Call) RunAndReturn(run func(ctx context.Context, questionID uuid.UUID) ([]*model.Answer, error)) *MockAnswerStore_GetAnswersByQuestionID_Call {
	_c.Call.Return(run)
	return _c
}
